#ifdef __cplusplus
extern "C" {
#endif

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/somatic.proto */

#ifndef PROTOBUF_C_proto_2fsomatic_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fsomatic_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Somatic__Vector Somatic__Vector;
typedef struct _Somatic__Ivector Somatic__Ivector;
typedef struct _Somatic__Matrix Somatic__Matrix;
typedef struct _Somatic__Timespec Somatic__Timespec;
typedef struct _Somatic__Metadata Somatic__Metadata;
typedef struct _Somatic__BaseMsg Somatic__BaseMsg;
typedef struct _Somatic__Transform Somatic__Transform;
typedef struct _Somatic__MultiTransform Somatic__MultiTransform;
typedef struct _Somatic__PointCloud Somatic__PointCloud;
typedef struct _Somatic__ForceMoment Somatic__ForceMoment;
typedef struct _Somatic__WaistCmd Somatic__WaistCmd;
typedef struct _Somatic__Battery Somatic__Battery;
typedef struct _Somatic__MotorCmd Somatic__MotorCmd;
typedef struct _Somatic__MotorState Somatic__MotorState;
typedef struct _Somatic__Joystick Somatic__Joystick;
typedef struct _Somatic__Liberty Somatic__Liberty;
typedef struct _Somatic__Cinder Somatic__Cinder;
typedef struct _Somatic__Dsa Somatic__Dsa;
typedef struct _Somatic__Touch Somatic__Touch;
typedef struct _Somatic__Hokuyo Somatic__Hokuyo;
typedef struct _Somatic__Microphone Somatic__Microphone;
typedef struct _Somatic__Token Somatic__Token;
typedef struct _Somatic__Crafty Somatic__Crafty;
typedef struct _Somatic__ChessPerception Somatic__ChessPerception;
typedef struct _Somatic__CanMsg Somatic__CanMsg;
typedef struct _Somatic__Limit Somatic__Limit;
typedef struct _Somatic__Event Somatic__Event;
typedef struct _Somatic__MonitorCmd Somatic__MonitorCmd;
typedef struct _Somatic__MonitorResp Somatic__MonitorResp;
typedef struct _Somatic__VisualizeData Somatic__VisualizeData;


/* --- enums --- */

typedef enum _Somatic__Event__Priorities {
  /*
   * system is unusable
   */
  SOMATIC__EVENT__PRIORITIES__EMERG = 0,
  /*
   * action must be take immediately
   */
  SOMATIC__EVENT__PRIORITIES__ALERT = 1,
  /*
   * critical conditions
   */
  SOMATIC__EVENT__PRIORITIES__CRIT = 2,
  /*
   * error conditions
   */
  SOMATIC__EVENT__PRIORITIES__ERR = 3,
  /*
   * warning conditions
   */
  SOMATIC__EVENT__PRIORITIES__WARNING = 4,
  /*
   * normal but significant condition
   */
  SOMATIC__EVENT__PRIORITIES__NOTICE = 5,
  /*
   * informational
   */
  SOMATIC__EVENT__PRIORITIES__INFO = 6,
  /*
   * debug-level messages
   */
  SOMATIC__EVENT__PRIORITIES__DEBUG = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__EVENT__PRIORITIES)
} Somatic__Event__Priorities;
typedef enum _Somatic__Event__Codes {
  SOMATIC__EVENT__CODES__UNKNOWN = 0,
  /*
   * period "everything's ok" message
   */
  SOMATIC__EVENT__CODES__PROC_HEARTBEAT = 1,
  /*
   * daemon is starting up
   */
  SOMATIC__EVENT__CODES__PROC_STARTING = 2,
  /*
   * daemon initialized and running
   */
  SOMATIC__EVENT__CODES__PROC_RUNNING = 3,
  /*
   * daemon is stopping
   */
  SOMATIC__EVENT__CODES__PROC_STOPPING = 4,
  /*
   * daemon has halted
   */
  SOMATIC__EVENT__CODES__PROC_HALTED = 5,
  /*
   * daemon in an error state
   */
  SOMATIC__EVENT__CODES__PROC_ERR = 6,
  /*
   * daemon has failed mysteriously
   */
  SOMATIC__EVENT__CODES__PROC_FAILED = 7,
  /*
   * invalid message received
   */
  SOMATIC__EVENT__CODES__COMM_BAD_MSG = 20,
  /*
   * couldn't send message
   */
  SOMATIC__EVENT__CODES__COMM_FAILED_TRANSPORT = 21,
  /*
   * message timeout
   */
  SOMATIC__EVENT__CODES__COMM_TIMEOUT = 22,
  /*
   * couldn't talk to device
   */
  SOMATIC__EVENT__CODES__COMM_DEV = 23,
  /*
   * limit condition
   */
  SOMATIC__EVENT__CODES__LIMIT = 30,
  /*
   * invalid parameter
   */
  SOMATIC__EVENT__CODES__BAD_PARAM = 40,
  /*
   * logic error
   */
  SOMATIC__EVENT__CODES__LOGIC = 50,
  /*
   * user interaction
   */
  SOMATIC__EVENT__CODES__UI = 60,
  /*
   * device error
   */
  SOMATIC__EVENT__CODES__DEV_ERR = 70,
  /*
   * shutdown everything
   */
  SOMATIC__EVENT__CODES__SYS_HALT = 90,
  /*
   * assertion error
   */
  SOMATIC__EVENT__CODES__BAD_ASSERT = 99,
  /*
   * really bad
   */
  SOMATIC__EVENT__CODES__INSANE = 100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__EVENT__CODES)
} Somatic__Event__Codes;
typedef enum _Somatic__MonitorCmd__CmdCodes {
  /*
   * /< start a process
   */
  SOMATIC__MONITOR_CMD__CMD_CODES__PROC_START = 1,
  /*
   * /< stop a process
   */
  SOMATIC__MONITOR_CMD__CMD_CODES__PROC_STOP = 2,
  /*
   * /< restart a process
   */
  SOMATIC__MONITOR_CMD__CMD_CODES__PROC_RESTART = 3,
  /*
   * /< start a process
   */
  SOMATIC__MONITOR_CMD__CMD_CODES__PROC_LIST = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__MONITOR_CMD__CMD_CODES)
} Somatic__MonitorCmd__CmdCodes;
/*
 * the physical unit represented by a number. Note that only MKS units
 * are listed here; that is intentional.
 * commonly used units should have codes < 128 so that they fit in a
 * single byte when varint-encoded
 */
typedef enum _Somatic__Unit {
  SOMATIC__UNIT__UNIT = 0,
  /*
   * Fundamental
   */
  SOMATIC__UNIT__METER = 1,
  SOMATIC__UNIT__KILOGRAM = 2,
  SOMATIC__UNIT__SECOND = 3,
  SOMATIC__UNIT__AMPERE = 4,
  SOMATIC__UNIT__KELVIN = 5,
  SOMATIC__UNIT__MOLE = 6,
  SOMATIC__UNIT__CANDELA = 7,
  /*
   * Special
   */
  SOMATIC__UNIT__HERTZ = 10,
  SOMATIC__UNIT__RADIAN = 11,
  SOMATIC__UNIT__STERADIAN = 12,
  SOMATIC__UNIT__NEWTON = 13,
  SOMATIC__UNIT__PASCAL = 14,
  SOMATIC__UNIT__JOULE = 15,
  SOMATIC__UNIT__WATT = 16,
  SOMATIC__UNIT__COULOMB = 17,
  SOMATIC__UNIT__VOLT = 18,
  SOMATIC__UNIT__FARAD = 19,
  SOMATIC__UNIT__OHM = 20,
  SOMATIC__UNIT__SIEMENS = 21,
  SOMATIC__UNIT__WEBER = 22,
  SOMATIC__UNIT__TESLA = 23,
  SOMATIC__UNIT__HENRY = 24,
  SOMATIC__UNIT__CELSIUS = 25,
  SOMATIC__UNIT__LUMEN = 26,
  SOMATIC__UNIT__LUX = 27,
  SOMATIC__UNIT__BECQUEREL = 28,
  SOMATIC__UNIT__GRAY = 29,
  SOMATIC__UNIT__SLEVERT = 30,
  SOMATIC__UNIT__KATAL = 31,
  /*
   * compound
   */
  /*
   * area
   */
  SOMATIC__UNIT__SQUARE_METER = 50,
  /*
   * volume
   */
  SOMATIC__UNIT__CUBIC_METER = 51,
  /*
   * velocity
   */
  SOMATIC__UNIT__METER_PER_SECOND = 60,
  /*
   * acceleration
   */
  SOMATIC__UNIT__METER_PER_SECOND_SQUARED = 61,
  /*
   * jerk
   */
  SOMATIC__UNIT__METER_PER_SECOND_CUBED = 62,
  /*
   * snap
   */
  SOMATIC__UNIT__METER_PER_QUARTIC_SECOND = 63,
  /*
   * angular velocity
   */
  SOMATIC__UNIT__RADIAN_PER_SECOND = 65,
  /*
   * angular acceleration
   */
  SOMATIC__UNIT__RADIAN_PER_SECOND_SQUARED = 66,
  /*
   * angular jerk
   */
  SOMATIC__UNIT__RADIAN_PER_SECOND_CUBED = 67,
  /*
   * angular snap
   */
  SOMATIC__UNIT__RADIAN_PER_QUARTIC_SECOND = 68,
  /*
   * torque/moment
   */
  SOMATIC__UNIT__NEWTON_METER = 70,
  /*
   * impulse
   */
  SOMATIC__UNIT__NEWTON_SECOND = 71,
  /*
   * end
   */
  SOMATIC__UNIT__BOGUS = 127
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__UNIT)
} Somatic__Unit;
/*
 * Physical quantities.  If at all possible, the code of the quanitity
 * should correspond to the code of the appropriate unit
 */
typedef enum _Somatic__Quantity {
  SOMATIC__QUANTITY__VOID = 0,
  /*
   * Fundamental
   */
  SOMATIC__QUANTITY__LENGTH = 1,
  SOMATIC__QUANTITY__MASS = 2,
  SOMATIC__QUANTITY__TIME = 3,
  SOMATIC__QUANTITY__CURRENT = 4,
  SOMATIC__QUANTITY__THERMODYNAMIC_TEMPERATURE = 5,
  SOMATIC__QUANTITY__AMOUNT = 6,
  SOMATIC__QUANTITY__LUMINOUS_INTENSITY = 7,
  /*
   * derived
   */
  SOMATIC__QUANTITY__FREQUENCY = 10,
  SOMATIC__QUANTITY__ANGLE = 11,
  SOMATIC__QUANTITY__SOLID_ANGLE = 12,
  SOMATIC__QUANTITY__FORCE = 13,
  SOMATIC__QUANTITY__PRESSURE = 14,
  SOMATIC__QUANTITY__ENERGY = 15,
  SOMATIC__QUANTITY__POWER = 16,
  SOMATIC__QUANTITY__CHARGE = 17,
  SOMATIC__QUANTITY__VOLTAGE = 18,
  SOMATIC__QUANTITY__CAPACITANCE = 19,
  SOMATIC__QUANTITY__RESISTANCE = 20,
  SOMATIC__QUANTITY__CONDUCTANCE = 21,
  SOMATIC__QUANTITY__MAGNETIC_FLUX = 22,
  SOMATIC__QUANTITY__MAGNETIC_FIELD = 23,
  SOMATIC__QUANTITY__INDUCTANCE = 24,
  SOMATIC__QUANTITY__TEMPERATURE = 25,
  SOMATIC__QUANTITY__LUMINOUS_FLUX = 26,
  SOMATIC__QUANTITY__ILLUMINANCE = 27,
  SOMATIC__QUANTITY__RADIOACTIVITY = 28,
  SOMATIC__QUANTITY__ABSORBED_DOSE = 29,
  SOMATIC__QUANTITY__EQUIVALENT_DOSE = 30,
  SOMATIC__QUANTITY__CATYLTIC_ACTIVITY = 31,
  /*
   * compound
   */
  SOMATIC__QUANTITY__AREA = 50,
  SOMATIC__QUANTITY__VOLUME = 51,
  SOMATIC__QUANTITY__VELOCITY = 60,
  SOMATIC__QUANTITY__ACCELERATION = 61,
  SOMATIC__QUANTITY__JERK = 62,
  SOMATIC__QUANTITY__SNAP = 63,
  SOMATIC__QUANTITY__ANGULAR_VELOCITY = 65,
  SOMATIC__QUANTITY__ANGULAR_ACCELERATION = 66,
  SOMATIC__QUANTITY__ANGULAR_JERK = 67,
  SOMATIC__QUANTITY__ANGULAR_SNAP = 68,
  SOMATIC__QUANTITY__TORQUE = 70,
  SOMATIC__QUANTITY__IMPULSE = 71
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__QUANTITY)
} Somatic__Quantity;
/*
 * codes for self-describing messages
 */
typedef enum _Somatic__MsgType {
  SOMATIC__MSG_TYPE__MOTOR_CMD = 1,
  SOMATIC__MSG_TYPE__MOTOR_STATE = 2,
  SOMATIC__MSG_TYPE__TRANSFORM = 3,
  SOMATIC__MSG_TYPE__MULTI_TRANSFORM = 4,
  SOMATIC__MSG_TYPE__FORCE_MOMENT = 5,
  SOMATIC__MSG_TYPE__POINT_CLOUD = 6,
  SOMATIC__MSG_TYPE__JOYSTICK = 7,
  SOMATIC__MSG_TYPE__TOUCH = 8,
  SOMATIC__MSG_TYPE__MICROPHONE = 9,
  SOMATIC__MSG_TYPE__BATTERY = 10,
  SOMATIC__MSG_TYPE__WAIST_CMD = 11,
  SOMATIC__MSG_TYPE__LIBERTY = 12,
  SOMATIC__MSG_TYPE__VISUALIZE_DATA = 13,
  SOMATIC__MSG_TYPE__CINDER = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__MSG_TYPE)
} Somatic__MsgType;
typedef enum _Somatic__WaistMode {
  SOMATIC__WAIST_MODE__MOVE_FWD = 0,
  SOMATIC__WAIST_MODE__MOVE_REV = 1,
  SOMATIC__WAIST_MODE__STOP = 2,
  SOMATIC__WAIST_MODE__CURRENT_MODE = 3,
  SOMATIC__WAIST_MODE__REAL_CURRENT_MODE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__WAIST_MODE)
} Somatic__WaistMode;
typedef enum _Somatic__MotorParam {
  SOMATIC__MOTOR_PARAM__MOTOR_CURRENT = 0,
  SOMATIC__MOTOR_PARAM__MOTOR_VELOCITY = 1,
  SOMATIC__MOTOR_PARAM__MOTOR_POSITION = 2,
  SOMATIC__MOTOR_PARAM__MOTOR_HALT = 3,
  SOMATIC__MOTOR_PARAM__MOTOR_RESET = 4,
  /*
   * Command Parameter to be used to toggle auxillary digital outputs provided with AMC drives
   */
  SOMATIC__MOTOR_PARAM__MOTOR_DIGITAL_OUT = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__MOTOR_PARAM)
} Somatic__MotorParam;
typedef enum _Somatic__MotorStatus {
  SOMATIC__MOTOR_STATUS__MOTOR_OK = 0,
  SOMATIC__MOTOR_STATUS__MOTOR_FAIL = 1,
  SOMATIC__MOTOR_STATUS__MOTOR_COMM_FAIL = 2,
  SOMATIC__MOTOR_STATUS__MOTOR_HW_FAIL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOMATIC__MOTOR_STATUS)
} Somatic__MotorStatus;

/* --- messages --- */

/*
 * You can view this as either a one-dimensional array of data or
 * a real-valued vector.
 */
struct  _Somatic__Vector
{
  ProtobufCMessage base;
  size_t n_data;
  double *data;
  /*
   * the units represented by this vector
   * may have length == 1 if all elements are the same unit
   */
  size_t n_units;
  Somatic__Unit *units;
};
#define SOMATIC__VECTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__vector__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * You can view this as either a one-dimensional array of data or
 * an integer-valued vector.
 */
struct  _Somatic__Ivector
{
  ProtobufCMessage base;
  size_t n_data;
  int64_t *data;
};
#define SOMATIC__IVECTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__ivector__descriptor) \
    , 0,NULL }


/*
 * Stores a column-major matrix. Packs the
 * matrix data into a single array of doubles,
 * and then provides either the row or the column count.
 */
struct  _Somatic__Matrix
{
  ProtobufCMessage base;
  /*
   *COLUMN-MAJOR ORDER!
   */
  size_t n_data;
  double *data;
  protobuf_c_boolean has_rows;
  int32_t rows;
  protobuf_c_boolean has_cols;
  int32_t cols;
  /*
   * the units represented by this matrix
   * may have length == 1 if all elements are the same unit
   */
  size_t n_units;
  Somatic__Unit *units;
};
#define SOMATIC__MATRIX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__matrix__descriptor) \
    , 0,NULL, 0,0, 0,0, 0,NULL }


struct  _Somatic__Timespec
{
  ProtobufCMessage base;
  int64_t sec;
  protobuf_c_boolean has_nsec;
  int32_t nsec;
};
#define SOMATIC__TIMESPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__timespec__descriptor) \
    , 0, 0,0 }


struct  _Somatic__Metadata
{
  ProtobufCMessage base;
  /*
   * sequence number of message
   */
  protobuf_c_boolean has_seq;
  int64_t seq;
  /*
   * time the message was sent
   */
  Somatic__Timespec *time;
  /*
   * absolute time until which the message is invalid
   */
  Somatic__Timespec *until;
  /*
   * string label
   */
  char *label;
  /*
   * type of message
   */
  protobuf_c_boolean has_type;
  Somatic__MsgType type;
};
#define SOMATIC__METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__metadata__descriptor) \
    , 0,0, NULL, NULL, NULL, 0,0 }


/*
 * all wire messages should be parsable as this
 */
struct  _Somatic__BaseMsg
{
  ProtobufCMessage base;
  Somatic__Metadata *meta;
};
#define SOMATIC__BASE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__base_msg__descriptor) \
    , NULL }


struct  _Somatic__Transform
{
  ProtobufCMessage base;
  /*
   * vector 3
   */
  Somatic__Vector *translation;
  /*
   * xyzw quaternion
   */
  Somatic__Vector *rotation;
  Somatic__Metadata *meta;
};
#define SOMATIC__TRANSFORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__transform__descriptor) \
    , NULL, NULL, NULL }


struct  _Somatic__MultiTransform
{
  ProtobufCMessage base;
  Somatic__Transform *origin;
  size_t n_tf;
  Somatic__Transform **tf;
  Somatic__Metadata *meta;
};
#define SOMATIC__MULTI_TRANSFORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__multi_transform__descriptor) \
    , NULL, 0,NULL, NULL }


struct  _Somatic__PointCloud
{
  ProtobufCMessage base;
  Somatic__Matrix *points;
  Somatic__Matrix *distance_map;
  Somatic__Matrix *amplitude_map;
  Somatic__Matrix *confidence_map;
  /*
   *optional timespec time = 5;
   */
  Somatic__Metadata *meta;
};
#define SOMATIC__POINT_CLOUD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__point_cloud__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _Somatic__ForceMoment
{
  ProtobufCMessage base;
  Somatic__Vector *force;
  Somatic__Vector *moment;
  /*
   *optional timespec time = 3;
   */
  Somatic__Metadata *meta;
};
#define SOMATIC__FORCE_MOMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__force_moment__descriptor) \
    , NULL, NULL, NULL }


struct  _Somatic__WaistCmd
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  Somatic__WaistMode mode;
  Somatic__Vector *data;
  Somatic__Metadata *meta;
};
#define SOMATIC__WAIST_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__waist_cmd__descriptor) \
    , 0,0, NULL, NULL }


struct  _Somatic__Battery
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  protobuf_c_boolean error;
  Somatic__Vector *voltage;
  Somatic__Vector *temp;
  Somatic__Metadata *meta;
};
#define SOMATIC__BATTERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__battery__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _Somatic__MotorCmd
{
  ProtobufCMessage base;
  protobuf_c_boolean has_param;
  Somatic__MotorParam param;
  Somatic__Vector *values;
  /*
   * Used only in case of AMC drives for toggling auxillary digital outputs
   */
  Somatic__Ivector *ivalues;
  Somatic__Metadata *meta;
};
#define SOMATIC__MOTOR_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__motor_cmd__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _Somatic__MotorState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_status;
  Somatic__MotorStatus status;
  Somatic__Vector *position;
  Somatic__Vector *velocity;
  Somatic__Vector *acceleration;
  Somatic__Vector *current;
  Somatic__Metadata *meta;
};
#define SOMATIC__MOTOR_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__motor_state__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, NULL }


struct  _Somatic__Joystick
{
  ProtobufCMessage base;
  Somatic__Ivector *buttons;
  Somatic__Vector *axes;
  Somatic__Metadata *meta;
};
#define SOMATIC__JOYSTICK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__joystick__descriptor) \
    , NULL, NULL, NULL }


struct  _Somatic__Liberty
{
  ProtobufCMessage base;
  /*
   * up to 8 sensors, with 7 doubles each
   */
  Somatic__Vector *sensor1;
  Somatic__Vector *sensor2;
  Somatic__Vector *sensor3;
  Somatic__Vector *sensor4;
  Somatic__Vector *sensor5;
  Somatic__Vector *sensor6;
  Somatic__Vector *sensor7;
  Somatic__Vector *sensor8;
  /*
   *optional ivector sensors = 1;
   *optional matrix data = 2; 
   */
  Somatic__Metadata *meta;
};
#define SOMATIC__LIBERTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__liberty__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Somatic__Cinder
{
  ProtobufCMessage base;
  Somatic__Vector *hole;
  Somatic__Vector *normal;
  Somatic__Metadata *meta;
};
#define SOMATIC__CINDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__cinder__descriptor) \
    , NULL, NULL, NULL }


struct  _Somatic__Dsa
{
  ProtobufCMessage base;
  Somatic__Ivector *output;
  Somatic__Metadata *meta;
};
#define SOMATIC__DSA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__dsa__descriptor) \
    , NULL, NULL }


struct  _Somatic__Touch
{
  ProtobufCMessage base;
  size_t n_values;
  Somatic__Matrix **values;
  Somatic__Metadata *meta;
};
#define SOMATIC__TOUCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__touch__descriptor) \
    , 0,NULL, NULL }


struct  _Somatic__Hokuyo
{
  ProtobufCMessage base;
  Somatic__Vector *ranges;
  Somatic__Metadata *meta;
};
#define SOMATIC__HOKUYO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__hokuyo__descriptor) \
    , NULL, NULL }


struct  _Somatic__Microphone
{
  ProtobufCMessage base;
  protobuf_c_boolean has_volume;
  double volume;
  Somatic__Metadata *meta;
};
#define SOMATIC__MICROPHONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__microphone__descriptor) \
    , 0,0, NULL }


struct  _Somatic__Token
{
  ProtobufCMessage base;
  char *type;
  protobuf_c_boolean has_code;
  int64_t code;
  Somatic__Vector *fattr;
  Somatic__Ivector *iattr;
  Somatic__Metadata *meta;
};
#define SOMATIC__TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__token__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL }


struct  _Somatic__Crafty
{
  ProtobufCMessage base;
  /*
   *optional bytes boardstate = 1;
   */
  char *move;
  Somatic__Metadata *meta;
};
#define SOMATIC__CRAFTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__crafty__descriptor) \
    , NULL, NULL }


struct  _Somatic__ChessPerception
{
  ProtobufCMessage base;
  Somatic__Vector *boardstate;
  Somatic__Vector *offset;
  Somatic__Metadata *meta;
};
#define SOMATIC__CHESS_PERCEPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__chess_perception__descriptor) \
    , NULL, NULL, NULL }


/*
 * Maybe we'll use this someday....
 */
struct  _Somatic__CanMsg
{
  ProtobufCMessage base;
  int32_t id;
  int32_t data_size;
  uint64_t data;
  protobuf_c_boolean has_extended;
  protobuf_c_boolean extended;
  protobuf_c_boolean has_bus;
  int32_t bus;
  Somatic__Metadata *meta;
};
#define SOMATIC__CAN_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__can_msg__descriptor) \
    , 0, 0, 0, 0,0, 0,0, NULL }


struct  _Somatic__Limit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_quantity;
  Somatic__Quantity quantity;
  protobuf_c_boolean has_index;
  int32_t index;
  protobuf_c_boolean has_actual;
  double actual;
  protobuf_c_boolean has_min;
  double min;
  protobuf_c_boolean has_max;
  double max;
};
#define SOMATIC__LIMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__limit__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Somatic__Event
{
  ProtobufCMessage base;
  protobuf_c_boolean has_priority;
  Somatic__Event__Priorities priority;
  /*
   * numeric code for event type
   */
  protobuf_c_boolean has_code;
  Somatic__Event__Codes code;
  /*
   * string name for event
   */
  char *type;
  /*
   * code for what thing the event is about
   */
  protobuf_c_boolean has_facility;
  int32_t facility;
  /*
   * string for what thing the event is about
   */
  char *ident;
  char *host;
  protobuf_c_boolean has_pid;
  int32_t pid;
  size_t n_limit;
  Somatic__Limit **limit;
  Somatic__Vector *attr;
  Somatic__Ivector *iattr;
  char *sattr;
  char *comment;
  Somatic__Metadata *meta;
};
#define SOMATIC__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__event__descriptor) \
    , 0,0, 0,0, NULL, 0,0, NULL, NULL, 0,0, 0,NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Somatic__MonitorCmd
{
  ProtobufCMessage base;
  /*
   * /< command
   */
  Somatic__MonitorCmd__CmdCodes cmd;
  /*
   * /< process name / id
   */
  char *proc;
  Somatic__Vector *attr;
  Somatic__Ivector *iattr;
  size_t n_sattrs;
  char **sattrs;
  Somatic__Metadata *meta;
};
#define SOMATIC__MONITOR_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__monitor_cmd__descriptor) \
    , 0, NULL, NULL, NULL, 0,NULL, NULL }


struct  _Somatic__MonitorResp
{
  ProtobufCMessage base;
  Somatic__Vector *attr;
  Somatic__Ivector *iattr;
  size_t n_sattrs;
  char **sattrs;
  Somatic__Metadata *meta;
};
#define SOMATIC__MONITOR_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__monitor_resp__descriptor) \
    , NULL, NULL, 0,NULL, NULL }


struct  _Somatic__VisualizeData
{
  ProtobufCMessage base;
  size_t n_vecs;
  Somatic__Vector **vecs;
  Somatic__Ivector *bools;
  char *msg;
  Somatic__Metadata *meta;
};
#define SOMATIC__VISUALIZE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&somatic__visualize_data__descriptor) \
    , 0,NULL, NULL, NULL, NULL }


/* Somatic__Vector methods */
void   somatic__vector__init
                     (Somatic__Vector         *message);
size_t somatic__vector__get_packed_size
                     (const Somatic__Vector   *message);
size_t somatic__vector__pack
                     (const Somatic__Vector   *message,
                      uint8_t             *out);
size_t somatic__vector__pack_to_buffer
                     (const Somatic__Vector   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Vector *
       somatic__vector__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__vector__free_unpacked
                     (Somatic__Vector *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Ivector methods */
void   somatic__ivector__init
                     (Somatic__Ivector         *message);
size_t somatic__ivector__get_packed_size
                     (const Somatic__Ivector   *message);
size_t somatic__ivector__pack
                     (const Somatic__Ivector   *message,
                      uint8_t             *out);
size_t somatic__ivector__pack_to_buffer
                     (const Somatic__Ivector   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Ivector *
       somatic__ivector__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__ivector__free_unpacked
                     (Somatic__Ivector *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Matrix methods */
void   somatic__matrix__init
                     (Somatic__Matrix         *message);
size_t somatic__matrix__get_packed_size
                     (const Somatic__Matrix   *message);
size_t somatic__matrix__pack
                     (const Somatic__Matrix   *message,
                      uint8_t             *out);
size_t somatic__matrix__pack_to_buffer
                     (const Somatic__Matrix   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Matrix *
       somatic__matrix__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__matrix__free_unpacked
                     (Somatic__Matrix *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Timespec methods */
void   somatic__timespec__init
                     (Somatic__Timespec         *message);
size_t somatic__timespec__get_packed_size
                     (const Somatic__Timespec   *message);
size_t somatic__timespec__pack
                     (const Somatic__Timespec   *message,
                      uint8_t             *out);
size_t somatic__timespec__pack_to_buffer
                     (const Somatic__Timespec   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Timespec *
       somatic__timespec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__timespec__free_unpacked
                     (Somatic__Timespec *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Metadata methods */
void   somatic__metadata__init
                     (Somatic__Metadata         *message);
size_t somatic__metadata__get_packed_size
                     (const Somatic__Metadata   *message);
size_t somatic__metadata__pack
                     (const Somatic__Metadata   *message,
                      uint8_t             *out);
size_t somatic__metadata__pack_to_buffer
                     (const Somatic__Metadata   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Metadata *
       somatic__metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__metadata__free_unpacked
                     (Somatic__Metadata *message,
                      ProtobufCAllocator *allocator);
/* Somatic__BaseMsg methods */
void   somatic__base_msg__init
                     (Somatic__BaseMsg         *message);
size_t somatic__base_msg__get_packed_size
                     (const Somatic__BaseMsg   *message);
size_t somatic__base_msg__pack
                     (const Somatic__BaseMsg   *message,
                      uint8_t             *out);
size_t somatic__base_msg__pack_to_buffer
                     (const Somatic__BaseMsg   *message,
                      ProtobufCBuffer     *buffer);
Somatic__BaseMsg *
       somatic__base_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__base_msg__free_unpacked
                     (Somatic__BaseMsg *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Transform methods */
void   somatic__transform__init
                     (Somatic__Transform         *message);
size_t somatic__transform__get_packed_size
                     (const Somatic__Transform   *message);
size_t somatic__transform__pack
                     (const Somatic__Transform   *message,
                      uint8_t             *out);
size_t somatic__transform__pack_to_buffer
                     (const Somatic__Transform   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Transform *
       somatic__transform__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__transform__free_unpacked
                     (Somatic__Transform *message,
                      ProtobufCAllocator *allocator);
/* Somatic__MultiTransform methods */
void   somatic__multi_transform__init
                     (Somatic__MultiTransform         *message);
size_t somatic__multi_transform__get_packed_size
                     (const Somatic__MultiTransform   *message);
size_t somatic__multi_transform__pack
                     (const Somatic__MultiTransform   *message,
                      uint8_t             *out);
size_t somatic__multi_transform__pack_to_buffer
                     (const Somatic__MultiTransform   *message,
                      ProtobufCBuffer     *buffer);
Somatic__MultiTransform *
       somatic__multi_transform__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__multi_transform__free_unpacked
                     (Somatic__MultiTransform *message,
                      ProtobufCAllocator *allocator);
/* Somatic__PointCloud methods */
void   somatic__point_cloud__init
                     (Somatic__PointCloud         *message);
size_t somatic__point_cloud__get_packed_size
                     (const Somatic__PointCloud   *message);
size_t somatic__point_cloud__pack
                     (const Somatic__PointCloud   *message,
                      uint8_t             *out);
size_t somatic__point_cloud__pack_to_buffer
                     (const Somatic__PointCloud   *message,
                      ProtobufCBuffer     *buffer);
Somatic__PointCloud *
       somatic__point_cloud__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__point_cloud__free_unpacked
                     (Somatic__PointCloud *message,
                      ProtobufCAllocator *allocator);
/* Somatic__ForceMoment methods */
void   somatic__force_moment__init
                     (Somatic__ForceMoment         *message);
size_t somatic__force_moment__get_packed_size
                     (const Somatic__ForceMoment   *message);
size_t somatic__force_moment__pack
                     (const Somatic__ForceMoment   *message,
                      uint8_t             *out);
size_t somatic__force_moment__pack_to_buffer
                     (const Somatic__ForceMoment   *message,
                      ProtobufCBuffer     *buffer);
Somatic__ForceMoment *
       somatic__force_moment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__force_moment__free_unpacked
                     (Somatic__ForceMoment *message,
                      ProtobufCAllocator *allocator);
/* Somatic__WaistCmd methods */
void   somatic__waist_cmd__init
                     (Somatic__WaistCmd         *message);
size_t somatic__waist_cmd__get_packed_size
                     (const Somatic__WaistCmd   *message);
size_t somatic__waist_cmd__pack
                     (const Somatic__WaistCmd   *message,
                      uint8_t             *out);
size_t somatic__waist_cmd__pack_to_buffer
                     (const Somatic__WaistCmd   *message,
                      ProtobufCBuffer     *buffer);
Somatic__WaistCmd *
       somatic__waist_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__waist_cmd__free_unpacked
                     (Somatic__WaistCmd *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Battery methods */
void   somatic__battery__init
                     (Somatic__Battery         *message);
size_t somatic__battery__get_packed_size
                     (const Somatic__Battery   *message);
size_t somatic__battery__pack
                     (const Somatic__Battery   *message,
                      uint8_t             *out);
size_t somatic__battery__pack_to_buffer
                     (const Somatic__Battery   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Battery *
       somatic__battery__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__battery__free_unpacked
                     (Somatic__Battery *message,
                      ProtobufCAllocator *allocator);
/* Somatic__MotorCmd methods */
void   somatic__motor_cmd__init
                     (Somatic__MotorCmd         *message);
size_t somatic__motor_cmd__get_packed_size
                     (const Somatic__MotorCmd   *message);
size_t somatic__motor_cmd__pack
                     (const Somatic__MotorCmd   *message,
                      uint8_t             *out);
size_t somatic__motor_cmd__pack_to_buffer
                     (const Somatic__MotorCmd   *message,
                      ProtobufCBuffer     *buffer);
Somatic__MotorCmd *
       somatic__motor_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__motor_cmd__free_unpacked
                     (Somatic__MotorCmd *message,
                      ProtobufCAllocator *allocator);
/* Somatic__MotorState methods */
void   somatic__motor_state__init
                     (Somatic__MotorState         *message);
size_t somatic__motor_state__get_packed_size
                     (const Somatic__MotorState   *message);
size_t somatic__motor_state__pack
                     (const Somatic__MotorState   *message,
                      uint8_t             *out);
size_t somatic__motor_state__pack_to_buffer
                     (const Somatic__MotorState   *message,
                      ProtobufCBuffer     *buffer);
Somatic__MotorState *
       somatic__motor_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__motor_state__free_unpacked
                     (Somatic__MotorState *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Joystick methods */
void   somatic__joystick__init
                     (Somatic__Joystick         *message);
size_t somatic__joystick__get_packed_size
                     (const Somatic__Joystick   *message);
size_t somatic__joystick__pack
                     (const Somatic__Joystick   *message,
                      uint8_t             *out);
size_t somatic__joystick__pack_to_buffer
                     (const Somatic__Joystick   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Joystick *
       somatic__joystick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__joystick__free_unpacked
                     (Somatic__Joystick *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Liberty methods */
void   somatic__liberty__init
                     (Somatic__Liberty         *message);
size_t somatic__liberty__get_packed_size
                     (const Somatic__Liberty   *message);
size_t somatic__liberty__pack
                     (const Somatic__Liberty   *message,
                      uint8_t             *out);
size_t somatic__liberty__pack_to_buffer
                     (const Somatic__Liberty   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Liberty *
       somatic__liberty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__liberty__free_unpacked
                     (Somatic__Liberty *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Cinder methods */
void   somatic__cinder__init
                     (Somatic__Cinder         *message);
size_t somatic__cinder__get_packed_size
                     (const Somatic__Cinder   *message);
size_t somatic__cinder__pack
                     (const Somatic__Cinder   *message,
                      uint8_t             *out);
size_t somatic__cinder__pack_to_buffer
                     (const Somatic__Cinder   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Cinder *
       somatic__cinder__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__cinder__free_unpacked
                     (Somatic__Cinder *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Dsa methods */
void   somatic__dsa__init
                     (Somatic__Dsa         *message);
size_t somatic__dsa__get_packed_size
                     (const Somatic__Dsa   *message);
size_t somatic__dsa__pack
                     (const Somatic__Dsa   *message,
                      uint8_t             *out);
size_t somatic__dsa__pack_to_buffer
                     (const Somatic__Dsa   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Dsa *
       somatic__dsa__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__dsa__free_unpacked
                     (Somatic__Dsa *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Touch methods */
void   somatic__touch__init
                     (Somatic__Touch         *message);
size_t somatic__touch__get_packed_size
                     (const Somatic__Touch   *message);
size_t somatic__touch__pack
                     (const Somatic__Touch   *message,
                      uint8_t             *out);
size_t somatic__touch__pack_to_buffer
                     (const Somatic__Touch   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Touch *
       somatic__touch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__touch__free_unpacked
                     (Somatic__Touch *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Hokuyo methods */
void   somatic__hokuyo__init
                     (Somatic__Hokuyo         *message);
size_t somatic__hokuyo__get_packed_size
                     (const Somatic__Hokuyo   *message);
size_t somatic__hokuyo__pack
                     (const Somatic__Hokuyo   *message,
                      uint8_t             *out);
size_t somatic__hokuyo__pack_to_buffer
                     (const Somatic__Hokuyo   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Hokuyo *
       somatic__hokuyo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__hokuyo__free_unpacked
                     (Somatic__Hokuyo *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Microphone methods */
void   somatic__microphone__init
                     (Somatic__Microphone         *message);
size_t somatic__microphone__get_packed_size
                     (const Somatic__Microphone   *message);
size_t somatic__microphone__pack
                     (const Somatic__Microphone   *message,
                      uint8_t             *out);
size_t somatic__microphone__pack_to_buffer
                     (const Somatic__Microphone   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Microphone *
       somatic__microphone__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__microphone__free_unpacked
                     (Somatic__Microphone *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Token methods */
void   somatic__token__init
                     (Somatic__Token         *message);
size_t somatic__token__get_packed_size
                     (const Somatic__Token   *message);
size_t somatic__token__pack
                     (const Somatic__Token   *message,
                      uint8_t             *out);
size_t somatic__token__pack_to_buffer
                     (const Somatic__Token   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Token *
       somatic__token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__token__free_unpacked
                     (Somatic__Token *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Crafty methods */
void   somatic__crafty__init
                     (Somatic__Crafty         *message);
size_t somatic__crafty__get_packed_size
                     (const Somatic__Crafty   *message);
size_t somatic__crafty__pack
                     (const Somatic__Crafty   *message,
                      uint8_t             *out);
size_t somatic__crafty__pack_to_buffer
                     (const Somatic__Crafty   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Crafty *
       somatic__crafty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__crafty__free_unpacked
                     (Somatic__Crafty *message,
                      ProtobufCAllocator *allocator);
/* Somatic__ChessPerception methods */
void   somatic__chess_perception__init
                     (Somatic__ChessPerception         *message);
size_t somatic__chess_perception__get_packed_size
                     (const Somatic__ChessPerception   *message);
size_t somatic__chess_perception__pack
                     (const Somatic__ChessPerception   *message,
                      uint8_t             *out);
size_t somatic__chess_perception__pack_to_buffer
                     (const Somatic__ChessPerception   *message,
                      ProtobufCBuffer     *buffer);
Somatic__ChessPerception *
       somatic__chess_perception__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__chess_perception__free_unpacked
                     (Somatic__ChessPerception *message,
                      ProtobufCAllocator *allocator);
/* Somatic__CanMsg methods */
void   somatic__can_msg__init
                     (Somatic__CanMsg         *message);
size_t somatic__can_msg__get_packed_size
                     (const Somatic__CanMsg   *message);
size_t somatic__can_msg__pack
                     (const Somatic__CanMsg   *message,
                      uint8_t             *out);
size_t somatic__can_msg__pack_to_buffer
                     (const Somatic__CanMsg   *message,
                      ProtobufCBuffer     *buffer);
Somatic__CanMsg *
       somatic__can_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__can_msg__free_unpacked
                     (Somatic__CanMsg *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Limit methods */
void   somatic__limit__init
                     (Somatic__Limit         *message);
size_t somatic__limit__get_packed_size
                     (const Somatic__Limit   *message);
size_t somatic__limit__pack
                     (const Somatic__Limit   *message,
                      uint8_t             *out);
size_t somatic__limit__pack_to_buffer
                     (const Somatic__Limit   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Limit *
       somatic__limit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__limit__free_unpacked
                     (Somatic__Limit *message,
                      ProtobufCAllocator *allocator);
/* Somatic__Event methods */
void   somatic__event__init
                     (Somatic__Event         *message);
size_t somatic__event__get_packed_size
                     (const Somatic__Event   *message);
size_t somatic__event__pack
                     (const Somatic__Event   *message,
                      uint8_t             *out);
size_t somatic__event__pack_to_buffer
                     (const Somatic__Event   *message,
                      ProtobufCBuffer     *buffer);
Somatic__Event *
       somatic__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__event__free_unpacked
                     (Somatic__Event *message,
                      ProtobufCAllocator *allocator);
/* Somatic__MonitorCmd methods */
void   somatic__monitor_cmd__init
                     (Somatic__MonitorCmd         *message);
size_t somatic__monitor_cmd__get_packed_size
                     (const Somatic__MonitorCmd   *message);
size_t somatic__monitor_cmd__pack
                     (const Somatic__MonitorCmd   *message,
                      uint8_t             *out);
size_t somatic__monitor_cmd__pack_to_buffer
                     (const Somatic__MonitorCmd   *message,
                      ProtobufCBuffer     *buffer);
Somatic__MonitorCmd *
       somatic__monitor_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__monitor_cmd__free_unpacked
                     (Somatic__MonitorCmd *message,
                      ProtobufCAllocator *allocator);
/* Somatic__MonitorResp methods */
void   somatic__monitor_resp__init
                     (Somatic__MonitorResp         *message);
size_t somatic__monitor_resp__get_packed_size
                     (const Somatic__MonitorResp   *message);
size_t somatic__monitor_resp__pack
                     (const Somatic__MonitorResp   *message,
                      uint8_t             *out);
size_t somatic__monitor_resp__pack_to_buffer
                     (const Somatic__MonitorResp   *message,
                      ProtobufCBuffer     *buffer);
Somatic__MonitorResp *
       somatic__monitor_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__monitor_resp__free_unpacked
                     (Somatic__MonitorResp *message,
                      ProtobufCAllocator *allocator);
/* Somatic__VisualizeData methods */
void   somatic__visualize_data__init
                     (Somatic__VisualizeData         *message);
size_t somatic__visualize_data__get_packed_size
                     (const Somatic__VisualizeData   *message);
size_t somatic__visualize_data__pack
                     (const Somatic__VisualizeData   *message,
                      uint8_t             *out);
size_t somatic__visualize_data__pack_to_buffer
                     (const Somatic__VisualizeData   *message,
                      ProtobufCBuffer     *buffer);
Somatic__VisualizeData *
       somatic__visualize_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   somatic__visualize_data__free_unpacked
                     (Somatic__VisualizeData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Somatic__Vector_Closure)
                 (const Somatic__Vector *message,
                  void *closure_data);
typedef void (*Somatic__Ivector_Closure)
                 (const Somatic__Ivector *message,
                  void *closure_data);
typedef void (*Somatic__Matrix_Closure)
                 (const Somatic__Matrix *message,
                  void *closure_data);
typedef void (*Somatic__Timespec_Closure)
                 (const Somatic__Timespec *message,
                  void *closure_data);
typedef void (*Somatic__Metadata_Closure)
                 (const Somatic__Metadata *message,
                  void *closure_data);
typedef void (*Somatic__BaseMsg_Closure)
                 (const Somatic__BaseMsg *message,
                  void *closure_data);
typedef void (*Somatic__Transform_Closure)
                 (const Somatic__Transform *message,
                  void *closure_data);
typedef void (*Somatic__MultiTransform_Closure)
                 (const Somatic__MultiTransform *message,
                  void *closure_data);
typedef void (*Somatic__PointCloud_Closure)
                 (const Somatic__PointCloud *message,
                  void *closure_data);
typedef void (*Somatic__ForceMoment_Closure)
                 (const Somatic__ForceMoment *message,
                  void *closure_data);
typedef void (*Somatic__WaistCmd_Closure)
                 (const Somatic__WaistCmd *message,
                  void *closure_data);
typedef void (*Somatic__Battery_Closure)
                 (const Somatic__Battery *message,
                  void *closure_data);
typedef void (*Somatic__MotorCmd_Closure)
                 (const Somatic__MotorCmd *message,
                  void *closure_data);
typedef void (*Somatic__MotorState_Closure)
                 (const Somatic__MotorState *message,
                  void *closure_data);
typedef void (*Somatic__Joystick_Closure)
                 (const Somatic__Joystick *message,
                  void *closure_data);
typedef void (*Somatic__Liberty_Closure)
                 (const Somatic__Liberty *message,
                  void *closure_data);
typedef void (*Somatic__Cinder_Closure)
                 (const Somatic__Cinder *message,
                  void *closure_data);
typedef void (*Somatic__Dsa_Closure)
                 (const Somatic__Dsa *message,
                  void *closure_data);
typedef void (*Somatic__Touch_Closure)
                 (const Somatic__Touch *message,
                  void *closure_data);
typedef void (*Somatic__Hokuyo_Closure)
                 (const Somatic__Hokuyo *message,
                  void *closure_data);
typedef void (*Somatic__Microphone_Closure)
                 (const Somatic__Microphone *message,
                  void *closure_data);
typedef void (*Somatic__Token_Closure)
                 (const Somatic__Token *message,
                  void *closure_data);
typedef void (*Somatic__Crafty_Closure)
                 (const Somatic__Crafty *message,
                  void *closure_data);
typedef void (*Somatic__ChessPerception_Closure)
                 (const Somatic__ChessPerception *message,
                  void *closure_data);
typedef void (*Somatic__CanMsg_Closure)
                 (const Somatic__CanMsg *message,
                  void *closure_data);
typedef void (*Somatic__Limit_Closure)
                 (const Somatic__Limit *message,
                  void *closure_data);
typedef void (*Somatic__Event_Closure)
                 (const Somatic__Event *message,
                  void *closure_data);
typedef void (*Somatic__MonitorCmd_Closure)
                 (const Somatic__MonitorCmd *message,
                  void *closure_data);
typedef void (*Somatic__MonitorResp_Closure)
                 (const Somatic__MonitorResp *message,
                  void *closure_data);
typedef void (*Somatic__VisualizeData_Closure)
                 (const Somatic__VisualizeData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    somatic__unit__descriptor;
extern const ProtobufCEnumDescriptor    somatic__quantity__descriptor;
extern const ProtobufCEnumDescriptor    somatic__msg_type__descriptor;
extern const ProtobufCEnumDescriptor    somatic__waist_mode__descriptor;
extern const ProtobufCEnumDescriptor    somatic__motor_param__descriptor;
extern const ProtobufCEnumDescriptor    somatic__motor_status__descriptor;
extern const ProtobufCMessageDescriptor somatic__vector__descriptor;
extern const ProtobufCMessageDescriptor somatic__ivector__descriptor;
extern const ProtobufCMessageDescriptor somatic__matrix__descriptor;
extern const ProtobufCMessageDescriptor somatic__timespec__descriptor;
extern const ProtobufCMessageDescriptor somatic__metadata__descriptor;
extern const ProtobufCMessageDescriptor somatic__base_msg__descriptor;
extern const ProtobufCMessageDescriptor somatic__transform__descriptor;
extern const ProtobufCMessageDescriptor somatic__multi_transform__descriptor;
extern const ProtobufCMessageDescriptor somatic__point_cloud__descriptor;
extern const ProtobufCMessageDescriptor somatic__force_moment__descriptor;
extern const ProtobufCMessageDescriptor somatic__waist_cmd__descriptor;
extern const ProtobufCMessageDescriptor somatic__battery__descriptor;
extern const ProtobufCMessageDescriptor somatic__motor_cmd__descriptor;
extern const ProtobufCMessageDescriptor somatic__motor_state__descriptor;
extern const ProtobufCMessageDescriptor somatic__joystick__descriptor;
extern const ProtobufCMessageDescriptor somatic__liberty__descriptor;
extern const ProtobufCMessageDescriptor somatic__cinder__descriptor;
extern const ProtobufCMessageDescriptor somatic__dsa__descriptor;
extern const ProtobufCMessageDescriptor somatic__touch__descriptor;
extern const ProtobufCMessageDescriptor somatic__hokuyo__descriptor;
extern const ProtobufCMessageDescriptor somatic__microphone__descriptor;
extern const ProtobufCMessageDescriptor somatic__token__descriptor;
extern const ProtobufCMessageDescriptor somatic__crafty__descriptor;
extern const ProtobufCMessageDescriptor somatic__chess_perception__descriptor;
extern const ProtobufCMessageDescriptor somatic__can_msg__descriptor;
extern const ProtobufCMessageDescriptor somatic__limit__descriptor;
extern const ProtobufCMessageDescriptor somatic__event__descriptor;
extern const ProtobufCEnumDescriptor    somatic__event__priorities__descriptor;
extern const ProtobufCEnumDescriptor    somatic__event__codes__descriptor;
extern const ProtobufCMessageDescriptor somatic__monitor_cmd__descriptor;
extern const ProtobufCEnumDescriptor    somatic__monitor_cmd__cmd_codes__descriptor;
extern const ProtobufCMessageDescriptor somatic__monitor_resp__descriptor;
extern const ProtobufCMessageDescriptor somatic__visualize_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fsomatic_2eproto__INCLUDED */
#ifdef __cplusplus
}
#endif

